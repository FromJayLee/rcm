{
  "rules": [
    {
      "type": "prd",
      "content": "# Product Requirement Document (PRD)\n\n## 1. Product Overview\nWeb-based generator that lets small SaaS founders create high-quality testimonial image cards for their landing pages in under one minute through a fixed 3-step workflow: 1) choose template & edit content, 2) style background, 3) export at desired resolution. The app guarantees aspect-ratio lock and pixel-perfect alignment from edit to export.\n\n## 2. Goals & Success Metrics\n| Goal | Metric | Target for MVP |\n| ---- | ------ | -------------- |\n| Reduce creation time | Avg. time from landing to export | < 60 seconds |\n| Validate willingness to pay | Free-to-paid conversion rate | ≥ 10% within 30 days |\n| User activation | Card export completion rate | ≥ 60% of sign-ups |\n| Market traction | Product Hunt upvotes | 250+ on launch day |\n\n## 3. Target Users\nPrimary: English-speaking solo/ small-team SaaS developers who manage their own marketing assets.\nSecondary: Growth marketers in startups (1-50 employees).\n\n## 4. Core Pain Points\n1. Wasting time configuring design tools for simple testimonial graphics.\n2. Maintaining brand consistency across multiple ratios/ resolutions.\n3. Switching between tools to resize exports for different placements.\n\n## 5. Key Use Case\nA SaaS founder needs five testimonial images for a pricing-page A/B test tonight. She lands on our site, signs in, completes the 3-step flow, downloads square and landscape versions in under a minute, and embeds them into Webflow.\n\n## 6. Product Features (MVP)\n### Must-Have\n1. Template Gallery (5 preset templates T1–T5 with dummy data)\n2. Content Editor Panel (rating, quote text, author name, role/company, avatar upload, anonymous toggle, light/dark)\n3. Canvas with locked aspect-ratio presets (1:1, 4:5, 16:9, 1.91:1, 3:2, 9:16)\n4. Background Styler (solid, gradient, image upload)\n5. Export Step: resolution presets + custom, PNG/JPG, 1×/2×, background include toggle, file naming\n6. Responsive web UI\n7. Dark-mode card option (template variant)\n8. Landing page with marketing funnel & token purchase CTA\n\n### Nice-to-Have (Post-MVP)\n1. Drag-and-drop uploads\n2. Undo/Redo history\n3. Team collaboration & brand kits\n4. API / bulk generation endpoint\n\n## 7. Non-Functional Requirements\n• Performance: first meaningful paint < 2.5 s on 4G\n• Accessibility: contrast ≥ 4.5:1, keyboard navigable\n• Consistency: exported image layout matches editor 1:1 at any resolution\n• Security: GDPR compliant, token payments via Stripe\n• Availability: 99.5% uptime\n\n## 8. Pricing & Monetisation\nPay-as-you-go: users purchase token packs (e.g., 20 exports for $10). Landing page promotes free tier with watermark or low-res download, upgrade via Stripe checkout.\n\n## 9. Technical Approach\n• Stack: Next.js 15, TypeScript, TailwindCSS, shadcn/ui, lucide-react, supabase (auth + storage), @tanstack/react-query, date-fns.\n• Image rendering via canvas & html-to-png library (es-toolkit) on client; fallback SSR for 2× exports via serverless function.\n• Supabase Storage for uploaded avatars/backgrounds.\n\n## 10. Assumptions\n1. English-only UI is acceptable to initial user base.\n2. SaaS founders are willing to pay ~$0.50 per export if value is proven.\n3. 3-step workflow is intuitive without onboarding videos.\n\n## 11. Risks & Mitigations\n| Risk | Probability | Impact | Mitigation |\n| ---- | ----------- | ------ | ---------- |\n| Canva releases similar SaaS templates | High | High | Focus on speed, API roadmap, community engagement |\n| Free competitors saturate SEO | Med | Med | Offer generous free tier but watermark, optimise Product Hunt launch |\n| Image rendering glitches across ratios | Med | High | Automated regression tests across all presets |\n\n## 12. Timeline (MVP)\n| Phase | Duration | Milestones |\n| ----- | -------- | ---------- |\n| Design & Spec | 1 wk | Finalise PRD, wireframes |\n| Sprint 1 | 2 wks | Template gallery, content editor |\n| Sprint 2 | 2 wks | Background styler, canvas ratio lock |\n| Sprint 3 | 2 wks | Export flow, image rendering accuracy tests |\n| Launch Prep | 1 wk | Landing page, Stripe tokens, analytics |\n| Public Launch | Day 0 | Product Hunt & Indie Hackers |\n\n## 13. Out of Scope (MVP)\n• Drag-and-drop uploads, undo/redo, team collaboration, multilanguage UI, AI copy suggestions\n\n## 14. Approval\nPM: __________   Date: ____\nEngineering Lead: __________   Date: ____\nDesign Lead: __________   Date: ____",
      "writedAt": "2025-09-13T15:28:29.934Z"
    },
    {
      "type": "architecture",
      "content": "Here is the refined Technical Requirements Document (TRD).\n\n---\n\n# **Technical Requirements Document (TRD)**\n\n## 1. Overview\nThis document outlines the technical implementation plan for the Testimonial Card Generator MVP. The primary technical goal is to build a fast, reliable, client-centric web application using a modern serverless stack. The architecture prioritizes speed of development and user experience, focusing on a streamlined 3-step workflow.\n\n## 2. System Architecture & Technology Stack\n\n### 2.1. High-Level Architecture\nThe system is a client-rendered Next.js application backed by Supabase for authentication, storage, and database services. The core image generation logic runs entirely in the user's browser for immediate feedback and low server overhead.\n\n```mermaid\ngraph TD\n    subgraph Browser\n        A[Client: Next.js/React]\n        B[Canvas Rendering Engine]\n    end\n\n    subgraph Supabase\n        C[Auth]\n        D[Storage: Avatars, BGs]\n        E[Database: Users, Tokens]\n    end\n\n    subgraph Stripe\n        F[Checkout & Payments API]\n    end\n\n    A --> B;\n    A -- Auth/Data --> C;\n    A -- File Uploads --> D;\n    A -- User Data/Tokens --> E;\n    A -- Initiate Purchase --> F;\n    F -- Webhook --> G[Next.js API Route];\n    G -- Update Tokens --> E;\n```\n\n### 2.2. Technology Stack\n\n| Category | Technology | Rationale for MVP |\n| :--- | :--- | :--- |\n| **Framework** | Next.js 15 (App Router) | Fast setup, file-based routing, and optimized static landing page. |\n| **Language** | TypeScript | Ensures type safety for component props and data models. |\n| **UI** | TailwindCSS & shadcn/ui | Rapid, consistent UI development with accessible components. |\n| **Backend** | Supabase (Auth, DB, Storage) | Integrated BaaS for fast development. Handles user management, file uploads, and data persistence without custom backend code. |\n| **Payments** | Stripe Checkout | Secure, simple integration for pay-as-you-go token purchases. |\n| **Image Generation** | `html-to-image` (or similar) | Client-side library to convert styled DOM elements into a PNG/JPG on the canvas, ensuring the editor view matches the export perfectly. |\n| **Data Fetching** | TanStack Query (`react-query`) | Manages server state, caching, and simplifies data fetching from Supabase. |\n\n## 3. Core Component Implementation\n\n### 3.1. User Flow & State Management\nThe application state will be managed primarily with React's built-in hooks (`useState`, `useContext`). TanStack Query will handle server state (user data, token balance). The user's design choices (template, content, styles) will be held in a single state object that is passed down through the 3-step workflow.\n\n1.  **Step 1: Template & Content**\n    *   **Templates:** 5 templates (T1-T5) will be stored as static React components with predefined layouts and styles.\n    *   **Content Editor:** A simple form whose state is directly mapped to the preview canvas. Avatar uploads will use Supabase Storage, generating a public URL to be stored in the user's design state.\n\n2.  **Step 2: Background Styling**\n    *   The styler updates CSS properties (e.g., `background`, `background-image`) on the canvas container element. Image uploads use the same Supabase Storage flow as avatars.\n\n3.  **Step 3: Export**\n    *   The `html-to-image` library will target the DOM node representing the styled testimonial card.\n    *   It will generate a canvas element, which is then converted to a PNG or JPG data URL for download.\n    *   Resolution scaling (1x/2x) will be handled by setting the `pixelRatio` option in the library.\n    *   On successful export, a user's token balance is decremented via an API call to a Next.js API Route that communicates with the Supabase database.\n\n### 3.2. Data Model (Supabase/PostgreSQL)\nA minimal data model is required for the MVP.\n\n*   **`profiles`**\n    *   `id` (uuid, foreign key to `auth.users.id`)\n    *   `email` (text)\n    *   `token_balance` (integer, default: 3)\n    *   `stripe_customer_id` (text, nullable)\n*   **`user_uploads`** (Optional, for managing user media)\n    *   `id` (uuid)\n    *   `user_id` (uuid, foreign key to `auth.users.id`)\n    *   `file_path` (text)\n    *   `created_at` (timestampz)\n\nRow Level Security (RLS) policies must be enabled to ensure users can only access and manage their own data.\n\n## 4. Key Non-Functional Requirements\n\n*   **Performance (FMP < 2.5s):**\n    *   The marketing landing page will be statically generated (SSG) by Next.js.\n    *   The main application will be client-side rendered. Code-splitting will be managed automatically by the Next.js App Router.\n    *   Limit initial bundle size by lazy-loading non-critical components.\n\n*   **Pixel-Perfect Consistency:**\n    *   The single-source-of-truth is the DOM. The `html-to-image` library directly captures this DOM structure, guaranteeing the export matches the preview.\n    *   Automated visual regression testing (e.g., using Playwright) is required for all templates and aspect ratios to prevent rendering glitches.\n\n*   **Security:**\n    *   All user-uploaded content will be served from Supabase Storage via its CDN, not from the primary application domain.\n    *   Implement strict RLS policies on all Supabase tables.\n    *   Stripe Checkout will be used to handle all payment information client-side, minimizing PCI compliance scope. A Next.js API route will securely handle the Stripe webhook for fulfillment.\n\n*   **Availability (99.5%):**\n    *   The architecture is serverless, relying on the high availability of Vercel (for Next.js hosting) and Supabase. This meets the requirement without custom infrastructure management.",
      "writedAt": "2025-09-13T15:28:29.934Z"
    },
    {
      "type": "guideline",
      "content": "\n    # Senior Developer Guidelines\n    \n    ## Must\n    \n    - always use client component for all components. (use `use client` directive)\n    - always use promise for page.tsx params props.\n    - use valid picsum.photos stock image for placeholder image\n    \n    ## Library\n    \n    use following libraries for specific functionalities:\n    \n    1. `date-fns`: For efficient date and time handling.\n    2. `ts-pattern`: For clean and type-safe branching logic.\n    3. `@tanstack/react-query`: For server state management.\n    4. `zustand`: For lightweight global state management.\n    5. `react-use`: For commonly needed React hooks.\n    6. `es-toolkit`: For robust utility functions.\n    7. `lucide-react`: For customizable icons.\n    8. `zod`: For schema validation and data integrity.\n    9. `shadcn-ui`: For pre-built accessible UI components.\n    10. `tailwindcss`: For utility-first CSS styling.\n    11. `supabase`: For a backend-as-a-service solution.\n    12. `react-hook-form`: For form validation and state management.\n    \n    ## Directory Structure\n    \n    - src\n    - src/app: Next.js App Routers\n    - src/components/ui: shadcn-ui components\n    - src/constants: Common constants\n    - src/hooks: Common hooks\n    - src/lib: utility functions\n    - src/remote: http client\n    - src/features/[featureName]/components/*: Components for specific feature\n    - src/features/[featureName]/constants/*\n    - src/features/[featureName]/hooks/*\n    - src/features/[featureName]/lib/*\n    - src/features/[featureName]/api.ts: api fetch functions\n    \n    ## Solution Process:\n    \n    1. Rephrase Input: Transform to clear, professional prompt.\n    2. Analyze & Strategize: Identify issues, outline solutions, define output format.\n    3. Develop Solution:\n       - \"As a senior-level developer, I need to [rephrased prompt]. To accomplish this, I need to:\"\n       - List steps numerically.\n       - \"To resolve these steps, I need the following solutions:\"\n       - List solutions with bullet points.\n    4. Validate Solution: Review, refine, test against edge cases.\n    5. Evaluate Progress:\n       - If incomplete: Pause, inform user, await input.\n       - If satisfactory: Proceed to final output.\n    6. Prepare Final Output:\n       - ASCII title\n       - Problem summary and approach\n       - Step-by-step solution with relevant code snippets\n       - Format code changes:\n        ```language:path/to/file\n         // ... existing code ...\n         function exampleFunction() {\n             // Modified or new code here\n         }\n         // ... existing code ...\n         ```\n       - Use appropriate formatting\n       - Describe modifications\n       - Conclude with potential improvements\n    \n    ## Key Mindsets:\n    \n    1. Simplicity\n    2. Readability\n    3. Maintainability\n    4. Testability\n    5. Reusability\n    6. Functional Paradigm\n    7. Pragmatism\n    \n    ## Code Guidelines:\n    \n    1. Early Returns\n    2. Conditional Classes over ternary\n    3. Descriptive Names\n    4. Constants > Functions\n    5. DRY\n    6. Functional & Immutable\n    7. Minimal Changes\n    8. Pure Functions\n    9. Composition over inheritance\n    \n    ## Functional Programming:\n    \n    - Avoid Mutation\n    - Use Map, Filter, Reduce\n    - Currying and Partial Application\n    - Immutability\n    \n    ## Code-Style Guidelines\n    \n    - Use TypeScript for type safety.\n    - Follow the coding standards defined in the ESLint configuration.\n    - Ensure all components are responsive and accessible.\n    - Use Tailwind CSS for styling, adhering to the defined color palette.\n    - When generating code, prioritize TypeScript and React best practices.\n    - Ensure that any new components are reusable and follow the existing design patterns.\n    - Minimize the use of AI generated comments, instead use clearly named variables and functions.\n    - Always validate user inputs and handle errors gracefully.\n    - Use the existing components and pages as a reference for the new components and pages.\n    \n    ## Performance:\n    \n    - Avoid Premature Optimization\n    - Profile Before Optimizing\n    - Optimize Judiciously\n    - Document Optimizations\n    \n    ## Comments & Documentation:\n    \n    - Comment function purpose\n    - Use JSDoc for JS\n    - Document \"why\" not \"what\"\n    \n    ## Function Ordering:\n    \n    - Higher-order functionality first\n    - Group related functions\n    \n    ## Handling Bugs:\n    \n    - Use TODO: and FIXME: comments\n    \n    ## Error Handling:\n    \n    - Use appropriate techniques\n    - Prefer returning errors over exceptions\n    \n    ## Testing:\n    \n    - Unit tests for core functionality\n    - Consider integration and end-to-end tests\n    \n    ## Next.js\n    \n    - you must use promise for page.tsx params props.\n    \n    ## Shadcn-ui\n    \n    - if you need to add new component, please show me the installation instructions. I'll paste it into terminal.\n    - example\n      ```\n      $ npx shadcn@latest add card\n      $ npx shadcn@latest add textarea\n      $ npx shadcn@latest add dialog\n      ```\n    \n    ## Supabase\n    \n    - if you need to add new table, please create migration. I'll paste it into supabase.\n    - do not run supabase locally\n    - store migration query for `.sql` file. in /supabase/migrations/\n    \n    ## Package Manager\n    \n    - use npm as package manager.\n    \n    ## Korean Text\n    \n    - 코드를 생성한 후에 utf-8 기준으로 깨지는 한글이 있는지 확인해주세요. 만약 있다면 수정해주세요.\n    \n    You are a senior full-stack developer, one of those rare 10x devs. Your focus: clean, maintainable, high-quality code.\n    Apply these principles judiciously, considering project and team needs.\n      ",
      "writedAt": "2025-09-13T15:28:29.934Z"
    },
    {
      "type": "design-guide",
      "content": "# 고품질 증언 이미지 생성기 Design Guide\n\n## 1. Overall Mood (전체적인 무드)\n\n이 서비스는 **신뢰할 수 있고 전문적인** 무드를 지향합니다. SaaS 창업자들이 빠르게 고품질의 증언 이미지를 생성할 수 있도록 돕는 도구로서, 미니멀하고 깔끔한 디자인을 통해 사용자가 콘텐츠 생성에만 집중할 수 있는 환경을 제공합니다. \n\n따뜻한 아이보리 배경과 강렬한 블랙 타이포그래피를 활용하여 **편안하면서도 프로페셔널한** 분위기를 연출합니다. 복잡한 디자인 도구에 지친 사용자들에게 **단순함과 효율성**을 제공하며, 60초 이내에 완성할 수 있는 직관적인 3단계 워크플로우를 통해 **신속함과 정확성**을 보장합니다.\n\n## 2. Reference Service (참조 서비스)\n\n- **Name**: Superhuman Blog\n- **Description**: 이메일 생산성 도구 Superhuman의 블로그 플랫폼으로, 깔끔하고 읽기 쉬운 에디토리얼 디자인을 특징으로 함\n- **Design Mood**: 크림색 배경과 넉넉한 여백, 얇은 상단바, 에디토리얼 타이포그래피를 통한 미니멀하고 전문적인 느낌\n- **Primary Color**: #F8F8F4 (따뜻한 아이보리)\n- **Secondary Color**: #000000 (순수한 블랙)\n\n## 3. Color & Gradient (색상 & 그라데이션)\n\n- **Primary Color**: #F8F8F4 (따뜻한 아이보리 - 메인 배경색)\n- **Secondary Color**: #000000 (순수한 블랙 - 메인 텍스트 & CTA)\n- **Accent Color**: #222222 (차콜 - 아이콘/구분선)\n- **Supporting Color**: #D9D7CF (따뜻한 그레이 - 보조 패널)\n- **Interactive Color**: #111111 (잉크 블랙 - 호버/액티브 상태)\n\n- **Mood**: 따뜻하고 낮은 채도, 높은 대비\n- **Color Usage**: \n  - 가장 중요한 UI 요소 (CTA 버튼, 메인 텍스트): 순수한 블랙 (#000000)\n  - 보조 정보 및 아이콘: 차콜 (#222222)\n  - 배경 및 패널: 따뜻한 아이보리 (#F8F8F4)와 따뜻한 그레이 (#D9D7CF)\n  - 상호작용 상태: 잉크 블랙 (#111111)\n\n## 4. Typography & Font (타이포그래피 & 폰트)\n\n- **Primary Font**: Inter 또는 Geist Sans\n- **Font Weights**: 400 (Regular), 600 (Semi-Bold)\n- **Base Font Size**: 16px\n- **Line Height**: 1.5\n\n**타이포그래피 스케일**:\n- **Heading 1**: Inter/Geist Sans, 28px, 600 weight\n- **Heading 2**: Inter/Geist Sans, 20px, 600 weight  \n- **Heading 3**: Inter/Geist Sans, 18px, 600 weight\n- **Body**: Inter/Geist Sans, 16px, 400 weight\n- **Small Text**: Inter/Geist Sans, 14px, 400 weight\n\n## 5. Layout & Structure (레이아웃 & 구조)\n\n**그리드 시스템**:\n- 최대 콘텐츠 너비: 920px\n- 에디터 캔버스: 중앙 정렬, 좌우 48px 여백\n- 카드 내부 패딩: 24px\n- 모서리 반경: 16-20px (카드), 8px (버튼)\n\n**네비게이션 구조**:\n- 고정 상단바\n  - 좌측: 로고\n  - 중앙/우측: 메뉴 (템플릿, 가격, 문서) + 메인 CTA (앱 실행)\n- 3단계 위저드 레이아웃 (1-카드 / 2-배경 / 3-내보내기)\n- 진행 상황 표시기 상단 배치\n\n**반응형 규칙**:\n- ≤768px: 에디터를 스택 레이아웃으로 전환 (미리보기 상단, 필드 하단)\n- 상단바는 햄버거 메뉴로 축소, CTA는 계속 표시\n\n## 6. Visual Style (비주얼 스타일)\n\n**아이콘 스타일**:\n- Lucide React 아이콘 사용\n- 1.5px 스트로크, 차콜 색상 (#222222)\n- 일관된 스타일과 크기 유지\n\n**이미지 처리**:\n- 템플릿 썸네일: 음소거된 그레이스케일 미리보기로 라이브 캔버스에 집중\n- 사용자 업로드 이미지: 고품질 유지, 적절한 압축\n\n**카드 및 컴포넌트**:\n- 부드러운 그림자 효과 (subtle shadow)\n- 깔끔한 경계선 처리\n- 넉넉한 여백으로 시각적 호흡감 확보\n\n## 7. UX Guide (UX 가이드)\n\n**초보자 중심의 UX 전략**:\n\n**직관적인 3단계 워크플로우**:\n- 명확하게 번호가 매겨진 선형 진행 과정\n- 각 단계별 상황에 맞는 도움말 텍스트 제공\n- \"좋습니다! 이제 배경을 선택해보세요.\" 같은 친근한 마이크로카피 사용\n\n**첫 방문자 가이드**:\n- 주요 버튼에 대한 툴팁 표시\n- 10초 데모 GIF로 빠른 이해 도움\n- 게스트 모드 제공으로 가입 전 체험 가능\n\n**피드백 및 확인**:\n- 인라인 유효성 검사\n- 자동 저장 기능\n- 단일 레벨 실행 취소 (복잡성 감소)\n\n**접근성 고려사항**:\n- 색상 대비 ≥ 4.5:1 (아이보리 배경의 블랙 텍스트)\n- 키보드 탐색 가능한 컨트롤\n- 차콜 색상의 포커스 링\n\n## 8. UI Component Guide (UI 컴포넌트 가이드)\n\n**버튼 스타일**:\n- **Primary CTA**: 블랙 배경 (#000000), 흰색 텍스트, 8px 모서리 반경\n- **Secondary**: 투명 배경, 블랙 테두리, 블랙 텍스트\n- **호버 상태**: 잉크 블랙 (#111111)으로 변경\n- **애니메이션**: 150ms ease-out, 불투명도/크기 변화\n\n**입력 필드**:\n- 따뜻한 그레이 배경 (#D9D7CF)\n- 16px 패딩, 8px 모서리 반경\n- 포커스 시 차콜 색상 테두리\n- 플레이스홀더 텍스트: 중간 그레이\n\n**카드 컴포넌트**:\n- 아이보리 배경 (#F8F8F4)\n- 16-20px 모서리 반경\n- 24px 내부 패딩\n- 미묘한 그림자 효과\n\n**네비게이션 바**:\n- 고정 위치, 아이보리 배경\n- 얇은 하단 경계선 (차콜)\n- 로고 좌측, 메뉴 및 CTA 우측 정렬\n\n**진행 표시기**:\n- 3개 단계 점으로 표시\n- 현재 단계: 블랙, 완료: 차콜, 대기: 연한 그레이\n- 단계별 레이블과 함께 표시\n\n**모달 및 오버레이**:\n- 반투명 배경 오버레이\n- 중앙 정렬된 콰드 컨테이너\n- 닫기 버튼 우측 상단 배치\n\n**토스트 알림**:\n- 우측 하단 표시\n- 성공: 녹색 액센트, 오류: 적색 액센트\n- 4초 자동 사라짐, 수동 닫기 가능",
      "writedAt": "2025-09-13T15:28:29.934Z"
    },
    {
      "type": "ia",
      "content": "# 고품질 증언 이미지 생성기 Information Architecture (IA)\n\n## 1. Site Map (사이트맵)\n\n```\n/ (홈)\n├── /templates (템플릿)\n├── /pricing (가격)\n├── /docs (문서)\n│   ├── /docs/getting-started (시작하기)\n│   ├── /docs/template-guide (템플릿 가이드)\n│   └── /docs/api (API 문서)\n├── /auth (인증)\n│   ├── /auth/login (로그인)\n│   ├── /auth/signup (회원가입)\n│   └── /auth/forgot-password (비밀번호 찾기)\n├── /app (에디터 앱)\n│   ├── /app/create (카드 생성)\n│   ├── /app/background (배경 설정)\n│   └── /app/export (내보내기)\n├── /profile (프로필)\n│   ├── /profile/account (계정 정보)\n│   ├── /profile/tokens (토큰 관리)\n│   └── /profile/uploads (업로드 파일)\n├── /checkout (결제)\n└── /legal (법적 고지)\n    ├── /legal/privacy (개인정보처리방침)\n    └── /legal/terms (이용약관)\n```\n\n## 2. User Flow (사용자 흐름)\n\n**핵심 작업: 증언 카드 생성 및 내보내기**\n1. 사용자가 랜딩페이지에서 'Launch App' 버튼 클릭\n2. 회원가입/로그인 페이지로 이동 (또는 게스트 모드 선택)\n3. 3단계 위저드 시작:\n   - 1단계: 템플릿 선택 → 콘텐츠 편집 (평점, 텍스트, 작성자 정보, 아바타 업로드)\n   - 2단계: 배경 스타일 설정 (단색/그라데이션/이미지)\n   - 3단계: 해상도 및 형식 선택 → 내보내기\n4. 무료 사용자의 경우 워터마크 포함 또는 토큰 구매 모달 표시\n5. 파일 다운로드 완료\n\n**보조 작업: 토큰 구매**\n1. 토큰 부족 알림 또는 프로필에서 토큰 관리 접근\n2. 가격 옵션 선택 (20토큰 $10 등)\n3. Stripe 결제 페이지로 이동\n4. 결제 완료 후 토큰 잔액 업데이트\n5. 에디터로 복귀\n\n## 3. Navigation Structure (네비게이션 구조)\n\n**글로벌 네비게이션 바 (GNB)**\n- 상단 고정형 네비게이션\n- 좌측: 로고 (홈 링크)\n- 중앙/우측: 메인 메뉴\n  - Templates (템플릿)\n  - Pricing (가격)\n  - Docs (문서)\n- 우측 끝: 메인 CTA 버튼 \"Launch App\"\n\n**앱 내 네비게이션**\n- 3단계 진행 표시기 (상단)\n- 이전/다음 버튼 (단계별 이동)\n- 프로필 드롭다운 메뉴 (우측 상단)\n  - Account (계정)\n  - Token Balance (토큰 잔액)\n  - Logout (로그아웃)\n\n**모바일 네비게이션 (≤768px)**\n- 햄버거 메뉴 → 사이드 드로어\n- 메인 CTA는 항상 표시\n- 에디터에서는 하단 고정 액션 버튼\n\n**푸터 네비게이션**\n- 회사 정보\n- 법적 고지 (개인정보처리방침, 이용약관)\n- 소셜 미디어 링크\n\n## 4. Page Hierarchy (페이지 계층 구조)\n\n```\n/ (Depth 1)\n├── /templates (Depth 1)\n├── /pricing (Depth 1)\n├── /docs (Depth 1)\n│   ├── /docs/getting-started (Depth 2)\n│   ├── /docs/template-guide (Depth 2)\n│   └── /docs/api (Depth 2)\n├── /auth (Depth 1)\n│   ├── /auth/login (Depth 2)\n│   ├── /auth/signup (Depth 2)\n│   └── /auth/forgot-password (Depth 2)\n├── /app (Depth 1) [인증 필요]\n│   ├── /app/create (Depth 2)\n│   ├── /app/background (Depth 2)\n│   └── /app/export (Depth 2)\n├── /profile (Depth 1) [인증 필요]\n│   ├── /profile/account (Depth 2)\n│   ├── /profile/tokens (Depth 2)\n│   └── /profile/uploads (Depth 2)\n├── /checkout (Depth 1) [인증 필요]\n└── /legal (Depth 1)\n    ├── /legal/privacy (Depth 2)\n    └── /legal/terms (Depth 2)\n```\n\n## 5. Content Organization (콘텐츠 구성)\n\n| 페이지 | 주요 콘텐츠 요소 |\n|---|---|\n| 홈 (/) | 히어로 섹션, 핵심 가치 제안, 3단계 작업 흐름 설명, 가격 정보, FAQ, 최종 CTA |\n| 템플릿 (/templates) | 템플릿 갤러리, 미리보기 이미지, 템플릿별 특징 설명 |\n| 가격 (/pricing) | 토큰 팩 옵션, 가격표, 무료 vs 유료 기능 비교 |\n| 로그인 (/auth/login) | 이메일/비밀번호 입력 폼, 소셜 로그인 옵션, 회원가입 링크 |\n| 회원가입 (/auth/signup) | 계정 생성 폼, 이용약관 동의, 게스트 모드 옵션 |\n| 에디터 - 1단계 (/app/create) | 템플릿 선택 패널, 콘텐츠 편집 패널, 실시간 미리보기 캔버스 |\n| 에디터 - 2단계 (/app/background) | 배경 타입 선택기, 색상 피커, 이미지 업로드, 미리보기 캔버스 |\n| 에디터 - 3단계 (/app/export) | 해상도 프리셋, 형식 선택, 배경 포함 토글, 파일명 입력, 내보내기 버튼 |\n| 프로필 - 토큰 (/profile/tokens) | 현재 토큰 잔액, 사용 내역, 토큰 구매 버튼 |\n| 결제 (/checkout) | 토큰 팩 선택, Stripe 결제 폼, 주문 요약 |\n\n## 6. Interaction Patterns (인터랙션 패턴)\n\n**모달 패턴**\n- 토큰 구매 확인 모달\n- 계정 삭제 확인 모달\n- 파일 업로드 진행 상황 모달\n\n**인라인 편집 패턴**\n- 실시간 텍스트 편집 (즉시 미리보기 반영)\n- 드래그 앤 드롭 이미지 업로드\n- 색상 피커를 통한 즉시 배경 변경\n\n**피드백 패턴**\n- 토스트 알림 (성공/오류 메시지)\n- 인라인 유효성 검사 (실시간 폼 검증)\n- 로딩 스피너 (파일 처리 중)\n\n**네비게이션 패턴**\n- 브레드크럼 (문서 섹션)\n- 진행 표시기 (3단계 위저드)\n- 탭 네비게이션 (프로필 섹션)\n\n**도움말 패턴**\n- 툴팁 (주요 기능 설명)\n- 인라인 도움말 텍스트\n- 상황별 가이드 메시지\n\n## 7. URL Structure (URL 구조)\n\n**일반 규칙**\n- 소문자 사용\n- 하이픈으로 단어 구분\n- 복수형보다는 단수형 선호\n- RESTful 패턴 준수\n\n**URL 패턴**\n- 메인 리소스: `/resource-name`\n- 상세 페이지: `/resource-name/:id`\n- 중첩 리소스: `/parent/child`\n- 액션: `/resource-name/action`\n\n**구체적 URL 예시**\n```\n/ (홈페이지)\n/templates (템플릿 갤러리)\n/pricing (가격 페이지)\n/docs (문서 홈)\n/docs/getting-started (시작 가이드)\n/auth/login (로그인)\n/auth/signup (회원가입)\n/app/create (카드 생성)\n/app/background (배경 설정)\n/app/export (내보내기)\n/profile/account (계정 설정)\n/profile/tokens (토큰 관리)\n/checkout?plan=basic (결제 페이지)\n/legal/privacy (개인정보처리방침)\n```\n\n## 8. Component Hierarchy (컴포넌트 계층 구조)\n\n**글로벌 컴포넌트**\n- `Header` - 상단 네비게이션 바\n- `Footer` - 하단 정보 영역\n- `Layout` - 페이지 공통 레이아웃\n- `SEOHead` - 메타데이터 관리\n- `ToastProvider` - 알림 시스템\n\n**네비게이션 컴포넌트**\n- `GlobalNav` - 메인 네비게이션\n- `MobileNav` - 모바일 햄버거 메뉴\n- `Breadcrumb` - 경로 표시\n- `StepIndicator` - 진행 단계 표시\n\n**폼 컴포넌트**\n- `AuthForm` - 로그인/회원가입 폼\n- `ContactForm` - 연락처 입력 폼\n- `PaymentForm` - 결제 정보 입력\n- `ProfileForm` - 프로필 편집 폼\n\n**에디터 컴포넌트**\n- `TemplateGallery` - 템플릿 선택 그리드\n- `ContentEditor` - 콘텐츠 편집 패널\n- `BackgroundStyler` - 배경 설정 도구\n- `ExportPanel` - 내보내기 옵션\n- `LivePreview` - 실시간 미리보기 캔버스\n\n**UI 컴포넌트**\n- `Button` - 다양한 스타일의 버튼\n- `Input` - 텍스트 입력 필드\n- `Modal` - 모달 다이얼로그\n- `Card` - 카드 컨테이너\n- `Tooltip` - 도움말 툴팁\n- `Toast` - 알림 메시지\n- `Spinner` - 로딩 표시기\n\n**비즈니스 로직 컴포넌트**\n- `TokenBalance` - 토큰 잔액 표시\n- `PricingCard` - 가격 플랜 카드\n- `UploadManager` - 파일 업로드 관리\n- `ExportManager` - 파일 내보내기 관리\n\n**페이지별 컴포넌트**\n- `HeroSection` - 랜딩 페이지 히어로\n- `FeatureSection` - 기능 소개 섹션\n- `TestimonialSection` - 고객 후기\n- `FAQSection` - 자주 묻는 질문\n- `PricingSection` - 가격 정보 섹션",
      "writedAt": "2025-09-13T15:28:29.934Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-09-13T15:28:29.934Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-09-13T15:28:29.934Z"
    }
  ]
}